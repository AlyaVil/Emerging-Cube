class Part {
  constructor(startX, startY, startZ, endX, endY, endZ, w, totalTime, partCount, maxW) {
    this.startX = startX;
    this.startY = startY;
    this.startZ = startZ;
    this.endX = endX;
    this.endY = endY;
    this.endZ = endZ;
    this.w = w;
    this.totalTime = totalTime;
    this.currentTime = 0;
    this.direction = true; //true -> extend, false -> shrink
    this.erase = false;
    this.col = color(255 * w / maxW);
  }
  update() {
    let currentX;
    let currentY;
    let currentZ;
    if (this.direction == true) { //extend
      let ratio = (this.currentTime / this.totalTime)**0.5;
      currentX = this.startX + (this.endX - this.startX) * ratio;
      currentY = this.startY + (this.endY - this.startY) * ratio;
      currentZ = this.startZ + (this.endZ - this.startZ) * ratio;
      if (this.currentTime < this.totalTime) { this.currentTime ++; }
      drawPart(this.startX, this.startY, this.startZ, currentX, currentY, currentZ, this.w, this.col);
    } else { //shrink
      let ratio = (1 - (this.currentTime - this.totalTime) / this.totalTime)**0.5;
      currentX = this.endX + (this.startX - this.endX) * ratio;
      currentY = this.endY + (this.startY - this.endY) * ratio;
      currentZ = this.endZ + (this.startZ - this.endZ) * ratio;
      this.currentTime ++;
      if (this.currentTime > this.totalTime * 2) { this.erase = true; }
      drawPart(this.endX, this.endY, this.endZ, currentX, currentY, currentZ, this.w, this.col);
    }
  }
}
